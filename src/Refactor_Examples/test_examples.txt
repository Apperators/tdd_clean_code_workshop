
// TEST REFACTORS

// 1

test("should send 500 for unknown error", async () => {
  // arrange
  const err = 123; // make err a type that is not an object or a string.

  // act
  promiseMiddleware(
    {} as Request,
    responseSpy as unknown as Response,
    jest.fn()
  );
  await responseSpy.promise(Promise.reject(err));

  // assert
  expect(responseSpy.statusCode).toBe(500);
});


// 2

import * as envHelpers from "./envHelpers";

const ACTUAL_ENV = process.env;

describe("Validate envHelper functions", () => {
  beforeEach(() => {
    process.env.X_ENV = undefined;
  });

  afterEach(() => {
    process.env = ACTUAL_ENV;
  });

  it("It should detect the correct environment", function () {
    let actual = envHelpers.checkProductEnv(["DEV", "STAGING", "PROD"]);
    expect(actual).toBe(true);
    actual = envHelpers.checkProductEnv(["STAGING", "PROD"]);
    expect(actual).toBe(false);
    process.env.DECON_ENV = "PROD";
    actual = envHelpers.checkProductEnv(["DEV"]);
    expect(actual).toBe(false);
    actual = envHelpers.checkProductEnv(["STAGING"]);
    expect(actual).toBe(false);
    actual = envHelpers.checkProductEnv(["PROD"]);
    expect(actual).toBe(true);
  });
});




// 3

it('should validate "x" post requests', () => {
  const fakeMongoId = generateFakeMongoId();
  const getXObjectPost: GetXObjectPost = {
    action: XObjectPostAction.GET_X,
    orgid: fakeMongoId,
  };

  expect(() => validateRequest(getXObjectPost)).not.toThrow();

  getXObjectPost.orgid = fakeMongoId.slice(0, fakeMongoId.length - 1) + "g";

  expect(() => validateRequest(getXObjectPost)).toThrowError(
    "ValidationError: orgid must match the following:"
  );

  getXObjectPost.orgid = fakeMongoId + "f";

  expect(() => validateRequest(getXObjectPost)).toThrowError(
    "ValidationError: orgid must match the following:"
  );

  getXObjectPost.orgid = fakeMongoId.slice(0, fakeMongoId.length - 1);

  expect(() => validateRequest(getXObjectPost)).toThrowError(
    "ValidationError: orgid must match the following:"
  );
});





// CODE REFACTORS

// 1

export const getStrippedDifferences = (diffs: Record<string, any>): Record<string, any> => {
  Array.from(ignoredDifferenceFields.keys()).forEach(key => {
    delete diffs[key];
  });
  return diffs;
};

async logUpdateBattledrillInstance(
  oldBD: BattleDrillInstance,
  newBD: BattleDrillInstance,
  userInfo: UserInfo,
): Promise<void> {

  const strippedDifference = getStrippedDifferences(findDiff(oldBD['_doc'], newBD['_doc']));

  if (strippedDifference['activePhase']) {
    const phase = await newBD['_doc'].phases.find(
      (p: Phase) => p._id.toString() === strippedDifference['activePhase'],
    );
    strippedDifference['activePhase'] = phase.name;
  }

  const differenceKeys = Object.keys(strippedDifference);
  for (const key of differenceKeys) {
    if (strippedDifference[key] !== StatusEnum.COMPLETE) {
      const log = {
        timestamp: new Date(),
        operation: newBD.status === StatusEnum.COMPLETE ? OperationEnum.COMPLETE : OperationEnum.UPDATED,
        onCollection: CollectionEnum.BATTLEDRILL_INSTANCE,
        itemId: newBD._id,
        firstName: userInfo.firstName,
        lastName: userInfo.lastName,
        email: userInfo.email,
        itemName: newBD.title + ' ' + (newBD.subtitle ? newBD.subtitle : ''),
        subTitle: newBD.subtitle,
        itemUniqueId: newBD.uniqueId,
        templateTitle: newBD.title,
        templateNo: newBD.uniqueId.split('.')[1],
        itemPosition: 'Drill Level',
        mission: '',
        subField: key,
        subFieldValue: strippedDifference[key],
        battleDrillInstanceId: newBD._id,
      };

      const newLog =  new this.logModel(log)
      await newLog.save();
    }
  }
}



// 2

export const diff =  (obj1: any, obj2: any) => {

  // Make sure an object to compare is provided
  if (!obj2 || Object.prototype.toString.call(obj2) !== '[object Object]') {
      return obj1;
  }

  const diffs = {};
  let key: string;

  const arrays = (arr1: any[], arr2: any[]): boolean => {

      // Check if the arrays are the same length
      if (arr1.length !== arr2.length) return false;

      // Check if all items exist and are in the same order
      for (let i = 0; i < arr1.length; i++) {
          if (arr1[i].toString() !== arr2[i].toString()) return false;
      }

      // Otherwise, return true
      return true;

  };

  const compare = (item1: any, item2: any, prop: string) => {

      // Get the object type
      const t1 = Object.prototype.toString.call(item1);
      const t2 = Object.prototype.toString.call(item2);

      // If type2 is undefined it has been removed
      if (t2 === '[object Undefined]') {
          diffs[prop] = null;
          return;
      }

      // If items are different types
      if (t1 !== t2) {
          diffs[prop] = item2.toString();
          return;
      }

      // If an array, compare
      if (t1 === '[object Array]') {   
          if (!arrays(item1, item2)) {
              for (let i = 0; i < item1.length; i++) {
                  if (item1[i].toString() !== item2[i].toString()) {
                      diffs[prop] = item2[i];
                  }
              }
          }
          return;
      } else {
          if (item1.toString() !== item2.toString()) {
              diffs[prop] = item2.toString();
          }
      }
  };


  //
  // Compare our objects
  //

  // Loop through the first object
  for (k in obj1) {
      compare(obj1[k], obj2[k], k);
  }

  // Loop through the second object and find missing items
  for (k in obj2) {
      if (!obj1[k] && obj1[k] !== obj2[k] ) {
          diffs[k] = obj2[k];
      }
  }

  // Return the object of differences
  return diffs;
};



